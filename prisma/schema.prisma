generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserTypeEnum {
  user  @map("user")
  admin @map("admin")

  @@map("user_type_enum")
}

enum OrderStatusEnum {
  new       @map("new")
  ready     @map("ready")
  finished  @map("finished")

  @@map("order_status_enum")
}

enum CartStatusEnum {
  new        @map("new")
  ordered    @map("ordered")
  cancelled  @map("cancelled")

  @@map("cart_status_enum")
}

model User {
  id         String        @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  type       UserTypeEnum                                     @default(user)
  email      String        @map("email")       @db.VarChar()     
  fullName   String        @map("full_name")   @db.VarChar()     
  password   String        @map("password")    @db.VarChar()     
  createdAt  DateTime      @map("created_at")  @db.Timestamp  @default(now())
  updatedAt  DateTime      @map("updated_at")  @db.Timestamp  @updatedAt
  deletedAt  DateTime?     @map("deleted_at")  @db.Timestamp

  carts   Cart[]
  orders  Order[]

  @@id([ id ])
  @@map("user")
}

model Category {
  id         String        @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name       String        @map("name")        @db.VarChar()     
  createdAt  DateTime      @map("created_at")  @db.Timestamp  @default(now())
  updatedAt  DateTime      @map("updated_at")  @db.Timestamp  @updatedAt
  deletedAt  DateTime?     @map("deleted_at")  @db.Timestamp

  products  Product[]

  @@id([ id ])
  @@map("category") 
}

model Product {
  id          String        @map("id")           @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  name        String        @map("name")         @db.VarChar()     
  image       String?       @map("image")        @db.VarChar()  @default("")
  price       Int           @map("price")        @db.Integer    @default(1)
  categoryId  String        @map("category_id")  @db.Uuid
  createdAt   DateTime      @map("created_at")   @db.Timestamp  @default(now())
  updatedAt   DateTime      @map("updated_at")   @db.Timestamp  @updatedAt
  deletedAt   DateTime?     @map("deleted_at")   @db.Timestamp

  category  Category  @relation(fields: [ categoryId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  carts   Cart[]
  orders  Order[]

  @@id([ id ])
  @@map("product") 
}

model Order {
  id         String           @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  orderID    Int              @map("order_id")    @db.Integer    @default(autoincrement())
  count      Int              @map("count")       @db.Integer    @default(1)
  status     OrderStatusEnum                                     @default(new) 
  userId     String           @map("user_id")     @db.Uuid
  productId  String           @map("product_id")  @db.Uuid
  createdAt  DateTime         @map("created_at")  @db.Timestamp  @default(now())
  updatedAt  DateTime         @map("updated_at")  @db.Timestamp  @updatedAt
  deletedAt  DateTime?        @map("deleted_at")  @db.Timestamp

  user     User     @relation(fields: [ userId    ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  product  Product  @relation(fields: [ productId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("order") 
}

model Cart {
  id         String          @map("id")          @db.Uuid       @default(dbgenerated("GEN_RANDOM_UUID()"))
  count      Int             @map("count")       @db.Integer    @default(1)
  status     CartStatusEnum                                     @default(new) 
  userId     String          @map("user_id")     @db.Uuid
  productId  String          @map("product_id")  @db.Uuid
  createdAt  DateTime        @map("created_at")  @db.Timestamp  @default(now())
  updatedAt  DateTime        @map("updated_at")  @db.Timestamp  @updatedAt
  deletedAt  DateTime?       @map("deleted_at")  @db.Timestamp

  user     User     @relation(fields: [ userId    ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)
  product  Product  @relation(fields: [ productId ], references: [ id ], onDelete: Cascade, onUpdate: NoAction)

  @@id([ id ])
  @@map("cart") 
}
